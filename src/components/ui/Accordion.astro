---

---

<div
  class="accordion-item hover:bg-content rounded-radius overflow-hidden transition-all duration-300 ease-out"
  data-state="collapsed"
>
  <div
    class="text-text-default group relative flex h-full w-full cursor-pointer items-center justify-between gap-4 border-none px-6 py-2 text-base font-medium transition-all duration-300 ease-out"
    data-accordion-header
  >
    <div class="flex h-full w-full flex-row items-center justify-between gap-4">
      <div class="flex max-w-2/3 shrink-0 flex-row items-center gap-4">
        <slot name="header-left" />
      </div>
      <svg
        class="grow opacity-0 transition-opacity duration-300"
        height="2"
        style="min-width: 20px;"
        data-accordion-line
      >
        <line
          x1="0"
          y1="1"
          x2="100%"
          y2="1"
          stroke="currentColor"
          stroke-width="1"
          stroke-dasharray="6 8"
          class="text-text-default/20"></line>
      </svg>
      <div class="flex max-w-1/3 shrink-0 flex-row items-center gap-4">
        <slot name="header-right" />
      </div>
    </div>
  </div>
  <div
    class="max-h-0 overflow-hidden transition-all duration-300 ease-out"
    data-accordion-content
  >
    <div
      class="text-text-default accordion-content-inner px-6 py-2 leading-relaxed opacity-0 transition-opacity duration-300 ease-out"
    >
      <slot name="content" />
    </div>
  </div>

  <script>
    document.addEventListener("astro:page-load", () => {
      const accordionItems =
        document.querySelectorAll<HTMLDivElement>(".accordion-item");

      // Track pinned item globally
      let pinnedItem: HTMLDivElement | null = null;

      accordionItems.forEach((item) => {
        // Prevent double-initialization on SPA navigations
        if (item.dataset.initialized === "true") return;

        const header = item.querySelector<HTMLElement>(
          "[data-accordion-header]"
        );
        const content = item.querySelector<HTMLElement>(
          "[data-accordion-content]"
        );
        const contentInner = item.querySelector<HTMLElement>(
          ".accordion-content-inner"
        );
        const line = item.querySelector<SVGSVGElement>("[data-accordion-line]");

        // Mark this item as initialized so we don't bind duplicate listeners
        item.dataset.initialized = "true";

        // Hover delay timer
        let hoverTimeout: ReturnType<typeof setTimeout> | null = null;

        // Helper function to expand an item
        const expandItem = (
          state: "hover" | "pinned",
          animate: boolean = true
        ) => {
          if (!content || !contentInner) return;

          item.dataset.state = state;

          // Apply state-specific styles
          if (state === "pinned") {
            item.classList.add("bg-content");
          }

          // Show controls
          if (line) line.style.opacity = "1";

          // Expand content
          content.style.maxHeight = `${content.scrollHeight}px`;

          // Fade in content with slight delay for smoothness
          setTimeout(
            () => {
              contentInner.style.opacity = "1";
            },
            animate ? 100 : 0
          );
        };

        // Helper function to collapse an item
        const collapseItem = (animate: boolean = true) => {
          if (!content || !contentInner) return;

          item.dataset.state = "collapsed";

          // Remove state-specific styles
          item.classList.remove("bg-content");

          // Hide controls
          if (line) line.style.opacity = "0";

          // Collapse content
          content.style.maxHeight = "0px";
          contentInner.style.opacity = "0";
        };

        // Hover: Expand temporarily
        header?.addEventListener("mouseenter", () => {
          // Only hover-expand if not already pinned
          if (item.dataset.state !== "pinned") {
            // Clear any existing timeout
            if (hoverTimeout) {
              clearTimeout(hoverTimeout);
            }

            // Set a delay before expanding (180ms for intentional hover)
            hoverTimeout = setTimeout(() => {
              expandItem("hover");
            }, 180);
          }
        });

        // Hover: Collapse when leaving (unless pinned)
        header?.addEventListener("mouseleave", () => {
          // Clear the timeout if mouse leaves before expansion
          if (hoverTimeout) {
            clearTimeout(hoverTimeout);
            hoverTimeout = null;
          }

          if (item.dataset.state === "hover") {
            collapseItem();
          }
        });

        // Click: Toggle pinned state
        header?.addEventListener("click", (e) => {
          e.stopPropagation();

          const currentState = item.dataset.state;

          // If clicking on already pinned item, unpin it
          if (currentState === "pinned") {
            collapseItem();
            pinnedItem = null;
          } else {
            // Close previously pinned item
            if (pinnedItem && pinnedItem !== item) {
              const prevContent = pinnedItem.querySelector<HTMLElement>(
                "[data-accordion-content]"
              );
              const prevContentInner = pinnedItem.querySelector<HTMLElement>(
                ".accordion-content-inner"
              );
              const prevHeader = pinnedItem.querySelector<HTMLElement>(
                "[data-accordion-header]"
              );
              const prevLine = pinnedItem.querySelector<SVGSVGElement>(
                "[data-accordion-line]"
              );

              pinnedItem.dataset.state = "collapsed";
              pinnedItem.classList.remove("bg-content");
              if (prevLine) prevLine.style.opacity = "0";
              if (prevContent) prevContent.style.maxHeight = "0px";
              if (prevContentInner) prevContentInner.style.opacity = "0";
            }

            // Pin current item
            expandItem("pinned");
            pinnedItem = item;
          }
        });
      });

      // Click outside to close pinned item (mobile-friendly)
      document.addEventListener("click", (e) => {
        if (pinnedItem) {
          const target = e.target as Node;
          if (!pinnedItem.contains(target)) {
            const content = pinnedItem.querySelector<HTMLElement>(
              "[data-accordion-content]"
            );
            const contentInner = pinnedItem.querySelector<HTMLElement>(
              ".accordion-content-inner"
            );
            const header = pinnedItem.querySelector<HTMLElement>(
              "[data-accordion-header]"
            );
            const line = pinnedItem.querySelector<SVGSVGElement>(
              "[data-accordion-line]"
            );

            pinnedItem.dataset.state = "collapsed";
            pinnedItem.classList.remove("bg-content");
            if (line) line.style.opacity = "0";
            if (content) content.style.maxHeight = "0px";
            if (contentInner) contentInner.style.opacity = "0";

            pinnedItem = null;
          }
        }
      });
    });
  </script>
</div>
