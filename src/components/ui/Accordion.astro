---
import { Icon } from "astro-icon/components";

interface Props {
  emphasized?: boolean;
  icon?: string;
  iconAlt?: string;
}

const { emphasized = false, icon, iconAlt = "" } = Astro.props;
---

<div class="accordion-item">
  <div
    class="hover:bg-muted text-text-default group bg-background flex h-full w-full cursor-pointer items-center justify-between gap-4 border-none px-6 py-2 text-base font-medium transition-colors duration-200"
    data-accordion-header
  >
    <div class="flex h-full w-full flex-row items-center justify-between gap-4">
      <span class="flex shrink-0 flex-row items-center gap-4">
        {
          icon && (
            <img
              src={icon}
              width="1.25rem"
              height="1.25rem"
              alt={iconAlt}
              class="h-5 w-5"
            />
          )
        }
        <slot name="header" />
      </span>
      <svg
        class="grow opacity-0 transition-opacity duration-200 group-hover:opacity-100"
        height="2"
        style="min-width: 20px;"
      >
        <line
          x1="0"
          y1="1"
          x2="100%"
          y2="1"
          stroke="currentColor"
          stroke-width="1"
          stroke-dasharray="6 8"
          class="text-text-default/20"></line>
      </svg>
      <div
        class="p-2 opacity-0 transition-opacity duration-200 group-hover:opacity-100"
      >
        <Icon
          name="caret-down"
          class="text-text-default accordion-icon h-[1.2rem] w-[1.2rem] transition-transform duration-200 ease-in-out"
          aria-hidden="true"
          data-accordion-icon
        />
      </div>
    </div>
  </div>
  <div
    class="max-h-0 overflow-hidden transition-all duration-300"
    data-accordion-content
  >
    <div
      class:list={[
        "text-text-default accordion-content-inner py-2 leading-relaxed opacity-0 transition-opacity duration-200 ease-in-out",
        icon ? "pr-6 pl-15" : "px-6",
      ]}
    >
      <slot name="content" />
    </div>
  </div>

  <script>
    document.addEventListener("astro:page-load", () => {
      const accordionItems =
        document.querySelectorAll<HTMLDivElement>(".accordion-item");

      accordionItems.forEach((item) => {
        // Prevent double-initialization on SPA navigations
        if (item.dataset.initialized === "true") return;

        const header = item.querySelector<HTMLElement>(
          "[data-accordion-header]"
        );
        const content = item.querySelector<HTMLElement>(
          "[data-accordion-content]"
        );
        const contentInner = item.querySelector<HTMLElement>(
          ".accordion-content-inner"
        );
        const icon = item.querySelector<SVGSVGElement>("[data-accordion-icon]");

        // Mark this item as initialized so we don't bind duplicate listeners
        item.dataset.initialized = "true";

        header?.addEventListener("click", () => {
          // Close all other accordion items
          accordionItems.forEach((otherItem) => {
            if (otherItem !== item) {
              otherItem.classList.remove("open");
              const otherContent = otherItem.querySelector<HTMLElement>(
                "[data-accordion-content]"
              );
              const otherContentInner = otherItem.querySelector<HTMLElement>(
                ".accordion-content-inner"
              );
              const otherIcon = otherItem.querySelector<SVGSVGElement>(
                "[data-accordion-icon]"
              );

              if (otherContent) {
                otherContent.style.maxHeight = "0px";
              }
              if (otherContentInner) {
                otherContentInner.style.opacity = "0";
              }
              if (otherIcon) {
                otherIcon.style.transform = "rotate(0deg)";
              }
            }
          });

          // Toggle current item
          item.classList.toggle("open");

          if (item.classList.contains("open")) {
            if (content) {
              content.style.maxHeight = `${content.scrollHeight}px`;
            }
            if (contentInner) {
              // Delay fade-in to start after expand animation begins
              setTimeout(() => {
                contentInner.style.opacity = "1";
              }, 100);
            }
            if (icon) {
              icon.style.transform = "rotate(180deg)";
            }
          } else {
            if (content) {
              content.style.maxHeight = "0px";
            }
            if (contentInner) {
              contentInner.style.opacity = "0";
            }
            if (icon) {
              icon.style.transform = "rotate(0deg)";
            }
          }
        });
      });
    });
  </script>
</div>
